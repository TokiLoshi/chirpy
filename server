package main

import (
	"context"
	"crypto/tls"
	"log"
	"net"
	"time"
)

type Server struct {
	// Address optionally specifies the TCP address for the port to listen on 
	// in the form "host:port". If empty, ":http" (port 80) is used
	// The service names are defined in RFC 6335 and assigned by IANA 
	// See net.Dial for details 
	Addr string 
	
	// Handler to invoke, http.DefaultServeMux if nil
	Handler Handler

	// DisableGeneralOptions Handler, if true, passes "OPTIONS *" requests to Handler,
	// otherwise responds with 200 ok and Content-Length: 0.
	DisableGeneralOptionsHandler bool 

	// TLSConfig optionally provides a TLS configuration for use
	// by ServeTLS and ListenAndServeTLS. 
	// Note that this value is clonde by ServeTLS and ListenAndSErveTLS
	// so it's not possible to modify the configuration with methods like
	// tls.Config.getSeessionTicketKeys, use Server.Serve with a TLS Listener instead
	TLSConfig *tls.Config 

	// ReadTimeout is the maximum duration for reading the entire request including body
	// A zero or negative value means no timeout
	// ReadTimeout does not let Handlers make per-request decisions on each request body's
	// acceptable deadline or upload rate, most users will prefer to use ReadHeaderTimeout.
	// Valid to use both 
	ReadTimeout time.Duration 

	// RequestHeaderTimeout is the amount of time allowed to read request headers
	// The connection's read deadline is reset after reading the headers and he Handler 
	// can decide what is considered too slow for the body. If zero, the value of 
	// ReadTimeout is used. If negative, or if zero and ReadTimeout is zero or negative 
	// there will be no timeout
	ReadHeadersTimeout time.Duration 

	// WriteTimeout is the max duration before timing out writes of the response. It is reset
	// whenevr a new request's header is read. Like ReadTimeout, it does not let Handlers
	// make decisions on a per-request basis. A zero or negative value means no timeout.
	WriteTimeout time.Duration 

	// IdleTimeout is the maximum amount of time to wait for the next request when keep-alives
	// are enabled. If zero, the value of ReadTimeout is used. If negative, or if zero and 
	// ReadTimeout is zero or negative there's no timeout
	IdleTimeout time.Duration 

	// MaxHeaderBytes controls the max number of bytes the server will read parsing the 
	// request header keys and values, including the request line. It does not limit the size
	// of the request body. If zero DefaultMaxHeaderBytes is used. 
	MaxHeaderBytes int 

	// TLSNextProto optionally specifies a function to take over ownership of the provided 
	// TLS connection when an ALPN protocol upgrade has occured. The map key is the protocol
	// name negotiated. The Handler argument should be used to handle HTTP reuqests and will
	// initialize the Requet's TLS and RemoteAddr if not already set. The connection is 
	// automatically closed when the function returns. If TLSNextProto is not nil HTTP/2
	// support is not enabled automatically. 
	TLSNextProto map[string]func(*Server, *tls.Conn, Handler)

	// ConnState specifies an optional callback function that is called when a client 
	// connection changes state. See the ConnState type and associated constants 
	ConnState func(net.Conn, ConnState)

	// ErrorLog specifies and optional logger for errors accepting connections 
	// unexpected behaviour from handlers and underlying FileSystem errors. If nil 
	// logging is done via the log package's standard logger. 
	ErrorLog *log.Logger

	// BaseContext optionally specifies a function that returns 
	// the base context for incoming reuqests on this server. The provided Listener
	// is the specific Listener that's about to start accepting requests. 
	// If BaseContext is nil, the default is context.Background() else it must 
	// return a non-nil context. 
	BaseContext func(net.Listener) context.Context

	// ConnContext optionally specifies a function that modifies the context used 
	// for a new connection c. The provided ctx is derived from the base context
	// and has a ServerContextKey value
	ConnContext func(ctx context.Context, c net.Conn) context.Context 
	// contains filtered or unexperted fields
}